#include <stdio.h>

// to encrypt using simple XOR character
char encryptChar(char ch) {
    // You can replace this key with any other value
    char key = 'Z';
    return ch ^ key;
}

// FUNCTION TO CHECK IF THE STRINGS ARE EQUAL
int areEqual(char str1[], char str2[]) {
    int i = 0;

    while (str1[i] != '\0' && str2[i] != '\0') {
        if (str1[i] != str2[i]) {
            return 0;  // Not equal
        }
        i++;
    }

    return (str1[i] == '\0' && str2[i] == '\0');
}

// FUNCTION TO GET THE LENGTH TO COMPARE THE PASSWORDS
int stringLength(char str[]) {
    int length = 0;

    while (str[length] != '\0') {
        length++;
    }

    return length;
}

int main() {
    // Original password
    char originalPassword[] = "completeUSELESS";

    // Encrypt the password
    char encryptedPassword[20];
    for (int i = 0; originalPassword[i] != '\0'; ++i) {
        encryptedPassword[i] = encryptChar(originalPassword[i]);
    }
    encryptedPassword[stringLength(originalPassword)] = '\0';

    char inputPassword[20];

    printf("Enter the password: ");

    int i = 0;
    char ch;
    while ((ch = getchar()) != '\n' && i < 19) {
        inputPassword[i] = ch;
        i++;
    }
    inputPassword[i] = '\0';

    // Encrypt the entered password for comparison
    char encryptedInput[20];
    for (int j = 0; inputPassword[j] != '\0'; ++j) {
        encryptedInput[j] = encryptChar(inputPassword[j]);
    }
    encryptedInput[stringLength(inputPassword)] = '\0';

    // To ceck if encrypted passwords are equal
    if (areEqual(encryptedPassword, encryptedInput)) {
        printf("Password is correct.\n");
    } else {
        printf("Incorrect password.\n");
    }

    return 0;
}

